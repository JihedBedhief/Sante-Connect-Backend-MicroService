services:
  mysql-db:
    image: mysql:8.0
    container_name: mysql-db
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=keycloak
      - MYSQL_ROOT_HOST=%
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - microservices-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 30s
      timeout: 10s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:23.0.7
    container_name: keycloak
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=mysql
      - KC_DB_URL=jdbc:mysql://mysql-db:3306/keycloak?createDatabaseIfNotExist=true
      - KC_DB_USERNAME=root
      - KC_DB_PASSWORD=root
      - KEYCLOAK_IMPORT=/opt/keycloak/data/import/realm-export.json
    ports:
      - "8080:8080"
    command:
      - start-dev
    depends_on:
      mysql-db:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health/ready" ]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - ./my-realm.json:/opt/keycloak/data/import/realm-export.json

  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    container_name: config-server
    ports:
      - "8888:8888"
    networks:
      - microservices-network
    environment:
      - SPRING_PROFILES_ACTIVE=native,docker
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  discovery-server:
    build:
      context: ./discovery
      dockerfile: Dockerfile
    container_name: discovery
    ports:
      - "8761:8761"
    networks:
      - microservices-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8888?timeout=30000
      - EUREKA_INSTANCE_HOSTNAME=discovery
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery:8761/eureka/
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
    depends_on:
      - config-server


  api-gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: gateway
    ports:
      - "8222:8222"
    networks:
      - microservices-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery:8761/eureka/



  users-service:
    build:
      context: ./User-microService
    container_name: users
    ports:
      - "8090:8090"
    environment:
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8888
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-db:3306/keycloak?allowPublicKeyRetrieval=true&useSSL=false
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
    networks:
      - microservices-network
    depends_on:
      mysql-db:
        condition: service_healthy
      keycloak:
        condition: service_started

  rendezvous:
    build:
      context: ./Rendez-vous-MicroService
      dockerfile: Dockerfile
    ports:
      - "8091:8091"
    environment:
      - eureka.client.service-url.defaultZone=http://discovery:8761/eureka
      - spring.datasource.url=jdbc:h2:mem:RDV
      - spring.cloud.config.uri=http://config-server:8888

    networks:
      - microservices-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8091/actuator/health" ]
      interval: 10s
      timeout: 10s
      retries: 5


networks:
  microservices-network:
    driver: bridge

volumes:
  mysql-data:
